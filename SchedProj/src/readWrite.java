package application;

/**
 * readWrite gives the static functions for reading and writing the .csv data files
 * 
 * @author Marge
 * @version November 16, 2015
 */

import java.util.ArrayList;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.FileNotFoundException;
public class readWrite
{
    
    /**
     * Constructor for objects of class empTester
     */
    public readWrite(){}

    /**
     * writeEmployeeData creates a csv file containing information about all the employees working, in the order of
     * pt/ft status, name, cafe name, keyholder status, min hours, max hours, availabilty start and stop times
     * for each employee in the arraylist
     * 
     * @param  allEmployees the arraylist of employees working
     *  
     */
    public static void  writeEmployeeData(ArrayList<Employee> allEmployees)
    {
        FileWriter empWriter; 
            try {
                empWriter = new FileWriter("employeeData.csv", false);
                for(Employee  e : allEmployees) {
                    assert (e instanceof FullTimeEmp) || (e instanceof PartTimeEmp);
                    if (e instanceof PartTimeEmp){empWriter.write("pt,");}
                    else if (e instanceof FullTimeEmp){empWriter.write("ft,");}
                    empWriter.write(e.getFullName() + "," + e.getCafeName() + "," + e.isKeyHolder() + ",");
                    if (e instanceof PartTimeEmp)
                    {
                        PartTimeEmp pt = (PartTimeEmp)e;
                        empWriter.write(pt.getHoursMin() + "," + pt.getHoursMax() + ",");
                    }
                    if (e instanceof FullTimeEmp){empWriter.write("35,40,");}
                    for (int i = 0; i < e.getAvailability().getStartStopQuarters().length; i++)
                    {
                        empWriter.write(e.getAvailability().getStartStopQuarters()[i][0].getQuarterOfWeekIndex() + ",");
                        empWriter.write(e.getAvailability().getStartStopQuarters()[i][1].getQuarterOfWeekIndex() + ",");
                    }
                    empWriter.write("\n");
                }
                empWriter.close();            
            }
            catch(IOException e) {
                System.out.println("Cannot save");
            }
    }
    
    
    /**
     * writeJobData creates a .csv file containing the job name and each job's list of employees
     * 
     * @param jobList an array of jobs, should be the jobList from the main function in the main class
     *  
     */
    public static void  writeJobData(Job[] jobList)
    {
            FileWriter jobWriter; 
            try {
                jobWriter = new FileWriter("jobAssignments.csv", false);
                for(Job j : jobList) {
                    jobWriter.write(j.getJobName() + ",");
                    for(Employee e : j.getEmployeeList())
                    {
                        jobWriter.write(e.getCafeName() + ",");
                    }
                    
                    jobWriter.write("\n");
                }
                jobWriter.close();            
            }
            catch(IOException e) {
                System.out.println("Cannot save");
            }
        
    }
    
    /**
     * readEmployeeData reads the data from the employee data file (as generated by the writeEmployeeData function)
     * and creates an arraylist of employees based on this data.
     * 
     * @return an arraylist of employees working and their data, such as availability, hours, etc.
     */
    public static ArrayList<Employee> readEmployeeData()
    {
        BufferedReader empReader;
        ArrayList<Employee> allEmployees = new ArrayList<Employee>();
        try {
            empReader = new BufferedReader(new FileReader("employeeData.csv"));
            String currentEmp = "";
            do {
                currentEmp = empReader.readLine();
                if (currentEmp != null)
                {
                    String[] current = currentEmp.split(",");
                
                    if (current[0].equals("ft")){allEmployees.add(new FullTimeEmp(current[1]));}
                    if (current[0].equals("pt")){allEmployees.add(new PartTimeEmp(current[1]));}
                    allEmployees.get(allEmployees.size()-1).setCafeName(current[2]);
                    boolean c = current[3].equals("true");
                    allEmployees.get(allEmployees.size()-1).giveKey(c);
                    if (allEmployees.get(allEmployees.size()-1) instanceof PartTimeEmp)
                    {
                        Double min = Double.parseDouble(current[4]);
                        Double max = Double.parseDouble(current[5]);
                        PartTimeEmp currentPT = (PartTimeEmp)allEmployees.get(allEmployees.size()-1);
                        currentPT.setHoursPerWeek(min, max);
                    }
                    for(int i = 6; i < current.length; i++)
                    if (i%2 == 0)
                    {
                        int start = Integer.parseInt(current[i]);
                        int stop = Integer.parseInt(current[i+1]);
                        allEmployees.get(allEmployees.size()-1).getAvailability().setTimeBlock(start, stop, true);
                    }
                }
            } while (currentEmp != null);
            empReader.close();
        }
        catch(FileNotFoundException e) {
            System.out.println("Missing Employee Data File");
        }
        catch(IOException e) {
            System.out.println("Problem with input/output");
        }
        return allEmployees;
    }
    
    /**
     * readJobData takes an array of Jobs and an arraylist of employees as input and compares the two
     * to the data file being read within the function, recreating the job array that is stored in the .csv
     * @param jobList an array of Jobs
     * @param allEmployees an arrayList of Employees
     * @return an array of Jobs, with each job containing an arrayList of employees as one of its variables.
     */
    public static Job[] readJobData(Job[] jobList, ArrayList<Employee> allEmployees)
    {
        BufferedReader jobReader;
        try {
            jobReader = new BufferedReader(new FileReader("jobAssignments.csv"));
            String currentJob;
            do {
                currentJob = jobReader.readLine();
                if (currentJob != null)
                {
                    String[] current = currentJob.split(",");
                
                    for(Job j : jobList)
                    {
                        if (j.getJobName().equals(current[0]))
                        {
                            for(int i = 2; i<current.length; i++)
                            {
                                for (Employee e : allEmployees)
                                {
                                    if (e.getCafeName().equals(current[i]))
                                    {
                                        j.addEmployee(e);
                                    }
                                }
                            }
                        }
                    }
                }
            } while (currentJob != null);
            jobReader.close();
        }
        catch(FileNotFoundException e) {
            System.out.println("Missing Employee Data File");
        }
        catch(IOException e) {
            System.out.println("Problem with input/output");
        }
        return jobList;
    }
}
